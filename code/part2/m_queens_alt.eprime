language ESSENCE' 1.0

given n : int

letting d be domain int(1..n)

find numQueens : d
find M : matrix indexed by [d,int(1,2)] of int(0..n)
find S : matrix indexed by [d] of int(0,1)

$branching
$heuristic

minimising numQueens

such that
	
	$ Third column is 'switch', sum to get total number of queens
	(sum i : d . S[i]) = numQueens,
	
	$ Switch is activated if co-ords are present
	forAll i : d .
		S[i] = 0 <-> M[i,1] = 0,
		
	forAll i : d .
		S[i] = 0 <-> M[i,2] = 0,

	$ No queens share an x co-ordinate
	alldifferent_except(flatten(M[..,1]),0),
	
	$ No queens share a y co-ordinate
	alldifferent_except(flatten(M[..,2]),0),
	
	$ No queens share a forward diagonal, or first entry is (0,0)
	forAll i : d .
		forAll j : int(i+1..n) .
			(M[i,1] = 0) \/ ( (M[i,1] - M[i,2]) != (M[j,1] - M[j,2]) ),
	
	$ No queens share a backward diagonal, or first entry is (0,0)
	forAll i : d .
		forAll j : int(i+1..n) .
			(M[i,1] = 0) \/ ( (M[i,1] + M[i,2]) != (M[j,1] + M[j,2]) ),
	
	$ Order results to push empty entries to the start
	forAll i : int(1..n-1) .
		M[i,1] <= M[i+1,1],
	
	$ Every co-ord is attacked from at least one direction
	forAll i : d .
		forAll j : d .
			exists k1 : d . M[k1,1] = i \/
			exists k2 : d . M[k2,2] = j \/
			exists k3 : d . ( (M[k3,1] - M[k3,2]) = (i-j) /\ M[k3,1] != 0 ) \/
			exists k4 : d . (M[k4,1] + M[k4,2]) = (i+j)

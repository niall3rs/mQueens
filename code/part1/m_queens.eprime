language ESSENCE' 1.0

given n : int

letting d be domain int(1..n)

find M : matrix indexed by [d,d] of int(0,1)
find numQueens : d

minimising numQueens

such that
	
	$ No more than one queen in each row
	forAll row : d . (sum i : d . M[row,i]) <= 1,
	
	$ No more than one queen in each column
	forAll col : d . (sum i : d . M[i,col]) <= 1,
	
	$ No more than one queen in each forward diagonal that starts from the top row
	forAll i : int(1..n-1) .
		(sum j : int(0..n-i) . M[1+j,i+j]) <= 1,
		
	$ No more than one queen in each forward digaonal that starts from the first column (skip main diagonal covered in last constraint)
	forAll i : int(2..n-1) .
		(sum j : int(0..n-i) . M[i+j,1+j]) <= 1,
	
	$ No more than one queen in each backward diagonal that starts from the top row
	forAll i : int(2..n) .
		(sum k : int(0..i-1) . M[1+k,i-k]) <= 1,
		
	$ No more than one queen in each backward diagonal that starts from the final column (skipping main anti-diagonal covered in last constraint)
	forAll i : int(2..n-1) .
		(sum k : int(0..n-i) . M[i+k,n-k]) <= 1,
	
	$ Every cell is attacked from some direction
	forAll i : d .
		forAll j : d .
		
			$ There is a queen in the column OR
			( (sum k1 : d . M[i,k1]) = 1 ) = true \/
			
			$ There is a queen in the row OR
			( (sum k2 : d . M[k2,j]) = 1 ) = true \/
			
			$ There is a queen in the forward diagonal OR
			( (sum k3 : int(1-min(i,j)..n-max(i,j)) . M[i+k3,j+k3]) = 1 ) = true \/
			
			$ There is a queen in the backward diagonal
			( (sum k4 : int(max(1-j,i-n)..min(i-1,n-j)) . M[i-k4,j+k4] ) = 1 ) = true,
			
	$ Calculate the total number of queens
	numQueens = sum i : d . sum j : d . M[i,j]

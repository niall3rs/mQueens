language ESSENCE' 1.0

given n : int

letting d be domain int(1..n)

find	M : matrix indexed by [d,d] of int(0,1)
find	reverseM : matrix indexed by [d,d] of int(0,1)
find	rotateM1 : matrix indexed by [d,d] of int(0,1)
find	rotateM2 : matrix indexed by [d,d] of int(0,1)
find	rotateM3 : matrix indexed by [d,d] of int(0,1)
find  reverseRM1 : matrix indexed by [d,d] of int(0,1)
find  reverseRM2 : matrix indexed by [d,d] of int(0,1)
find  reverseRM3 : matrix indexed by [d,d] of int(0,1)

such that
	
	$ One queen in each row
	forAll row : d . (sum i : d . M[row,i]) = 1,
	
	$ One queen in each column
	forAll col : d . (sum i : d . M[i,col]) = 1,
	
	$ No more than one queen in each forward diagonal that starts from top row
	forAll i : int(1..n-1) .
		(sum j : int(0..n-i) . M[1+j,i+j]) <= 1,
		
	$ No more than one queen in each forward digaonal that starts from the first column (skip main diagonal covered in last constraint)
	forAll i : int(2..n-1) .
		(sum j : int(0..n-i) . M[i+j,1+j]) <= 1,
	
	$ No more than one queen in each backward diagonal that starts from top row
	forAll i : int(2..n) .
		(sum k : int(0..i-1) . M[1+k,i-k]) <= 1,
		
	$ No more than one queen in each backward diagonal that starts from the final column (skipping main anti-diagonal covered in last constraint)
	forAll i : int(2..n-1) .
		(sum k : int(0..n-i) . M[i+k,n-k]) <= 1,
		
	$ Symmetry constraints
	
	$ Define necessary matrices
	forAll i : d .
	  forAll j : d .
	    reverseM[i,j] = M[i,n+1-j],
	
	forAll i : d .
	  forAll j : d .
	    rotateM1[i,j] = M[n+1-j,i],
	
	forAll i : d .
	  forAll j : d .
	    rotateM2[i,j] = M[n+1-i,n+1-j],
	
	forAll i : d .
	  forAll j : d .
	    rotateM3[i,j] = M[j,n+1-i],

  forAll i : d .
	  forAll j : d .
	    reverseRM1[i,j] = rotateM1[i,n+1-j],

  forAll i : d .
	  forAll j : d .
	    reverseRM2[i,j] = rotateM2[i,n+1-j],
	
	forAll i : d .
	  forAll j : d .
	    reverseRM3[i,j] = rotateM3[i,n+1-j],
	
	$ Ensure solution matrix is lexicographically before these rotated/flipped matrices (after flattening)
	flatten(M) <=lex flatten(reverseM),
	flatten(M) <=lex flatten(rotateM1),
	flatten(M) <=lex flatten(rotateM2),
	flatten(M) <=lex flatten(rotateM3),
	flatten(M) <=lex flatten(reverseRM1),
	flatten(M) <=lex flatten(reverseRM2),
	flatten(M) <=lex flatten(reverseRM3)
